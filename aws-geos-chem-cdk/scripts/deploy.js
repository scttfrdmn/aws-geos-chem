#!/usr/bin/env node
/**
 * deploy.js
 * Script to deploy GEOS-Chem AWS Cloud Runner infrastructure to different environments.
 * Usage: node deploy.js <environment>
 * Where environment is one of: dev, test, prod
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const AWS = require('aws-sdk');
const dotenv = require('dotenv');

// Constants
const CONFIG_DIR = path.join(__dirname, '..', 'config');
const VALID_ENVIRONMENTS = ['dev', 'test', 'prod'];
const DEFAULT_ENV = 'dev';

/**
 * Load environment configuration
 * @param {string} environment - The deployment environment (dev, test, prod)
 * @returns {Object} Configuration for the specified environment
 */
function loadEnvConfig(environment) {
  // Check if environment-specific config exists, otherwise use defaults
  const envConfigPath = path.join(CONFIG_DIR, `${environment}.env`);
  const defaultConfigPath = path.join(CONFIG_DIR, 'default.env');
  
  // Create config directory if it doesn't exist
  if (!fs.existsSync(CONFIG_DIR)) {
    fs.mkdirSync(CONFIG_DIR, { recursive: true });
  }
  
  // Create default config if it doesn't exist
  if (!fs.existsSync(defaultConfigPath)) {
    const defaultConfig = `# Default configuration for GEOS-Chem AWS Cloud Runner
# Created: ${new Date().toISOString()}
AWS_REGION=us-east-1
PROJECT_PREFIX=geos-chem
VPC_CIDR=10.0.0.0/16
MAX_AZS=2
NAT_GATEWAYS=1
`;
    fs.writeFileSync(defaultConfigPath, defaultConfig);
    console.log(`Created default configuration file: ${defaultConfigPath}`);
  }
  
  // Create environment config if it doesn't exist
  if (!fs.existsSync(envConfigPath)) {
    const envConfig = `# ${environment.toUpperCase()} configuration for GEOS-Chem AWS Cloud Runner
# Created: ${new Date().toISOString()}
# This file extends the default.env configuration
ENV=${environment}
ENVIRONMENT_TAG=${environment}

# You can override any default settings below
# AWS_REGION=us-east-1
# PROJECT_PREFIX=geos-chem-${environment}
`;
    fs.writeFileSync(envConfigPath, envConfig);
    console.log(`Created ${environment} configuration file: ${envConfigPath}`);
  }
  
  // Load configurations (default first, then environment-specific to override)
  const defaultConfig = dotenv.parse(fs.readFileSync(defaultConfigPath));
  const envConfig = dotenv.parse(fs.readFileSync(envConfigPath));
  
  // Merge configurations, with environment-specific values taking precedence
  const config = { ...defaultConfig, ...envConfig };
  return config;
}

/**
 * Update the AWS CDK app tags file with environment-specific tags
 * @param {Object} config - The environment configuration
 */
function updateCdkTags(config) {
  const cdkTagsPath = path.join(__dirname, '..', 'bin', 'cdk-tags.js');
  
  // Create the tags file if it doesn't exist
  const tagsContent = `/**
 * CDK Tags for GEOS-Chem AWS Cloud Runner resources
 * Environment: ${config.ENV}
 * Generated: ${new Date().toISOString()}
 * 
 * This file is auto-generated by the deploy script.
 * Do not modify directly.
 */

const cdkTags = {
  Project: 'GEOS-Chem-Cloud-Runner',
  Environment: '${config.ENVIRONMENT_TAG}',
  DeployedBy: '${process.env.USER || 'unknown'}',
  DeployedAt: '${new Date().toISOString()}'
};

module.exports = cdkTags;
`;
  
  fs.writeFileSync(cdkTagsPath, tagsContent);
  console.log(`Updated CDK tags file for ${config.ENV} environment`);
}

/**
 * Run pre-deployment checks to ensure environment is ready
 * @param {Object} config - The environment configuration
 */
function runPreDeploymentChecks(config) {
  console.log(`Running pre-deployment checks for ${config.ENV} environment...`);
  
  // Check AWS credentials
  try {
    const sts = new AWS.STS({ region: config.AWS_REGION });
    const identity = execSync('aws sts get-caller-identity --output json', { encoding: 'utf8' });
    console.log(`Deploying as: ${JSON.parse(identity).Arn}`);
  } catch (error) {
    console.error('Error getting AWS identity. Please check your AWS credentials.');
    console.error(error.message);
    process.exit(1);
  }
  
  // Check if environment is already bootstrapped
  try {
    console.log(`Checking if AWS CDK is bootstrapped in region ${config.AWS_REGION}...`);
    execSync(`cdk doctor`, { encoding: 'utf8' });
  } catch (error) {
    console.warn('CDK environment may not be bootstrapped. Running bootstrap...');
    try {
      execSync(`cdk bootstrap aws://${process.env.CDK_DEFAULT_ACCOUNT}/${config.AWS_REGION}`, { 
        encoding: 'utf8',
        stdio: 'inherit'
      });
    } catch (bootstrapError) {
      console.error('Error bootstrapping CDK environment:');
      console.error(bootstrapError.message);
      process.exit(1);
    }
  }
  
  console.log('Pre-deployment checks completed successfully.');
}

/**
 * Deploy the CDK stacks with environment-specific configuration
 * @param {Object} config - The environment configuration
 * @param {boolean} deployAll - Whether to deploy all stacks or just changed stacks
 */
function deployStacks(config, deployAll = false) {
  console.log(`Deploying GEOS-Chem Cloud Runner to ${config.ENV} environment...`);
  
  // Set environment variables for the CDK deployment
  process.env.CDK_DEFAULT_REGION = config.AWS_REGION;
  process.env.PROJECT_PREFIX = config.PROJECT_PREFIX;
  process.env.VPC_CIDR = config.VPC_CIDR;
  process.env.MAX_AZS = config.MAX_AZS;
  process.env.NAT_GATEWAYS = config.NAT_GATEWAYS;
  process.env.ENV = config.ENV;
  
  // Command to deploy all stacks or just the ones with changes
  const deployCommand = deployAll 
    ? `cdk deploy --all --require-approval never` 
    : `cdk deploy --all --require-approval never --exclusively`;
  
  // Additional parameters based on environment
  const additionalParams = [];
  
  if (config.ENV === 'prod') {
    // For production, add additional safety parameters
    additionalParams.push('--require-approval any-change');
  }
  
  // Execute the deployment
  try {
    console.log(`Executing: ${deployCommand} ${additionalParams.join(' ')}`);
    execSync(`${deployCommand} ${additionalParams.join(' ')}`, { 
      encoding: 'utf8',
      stdio: 'inherit'
    });
    console.log(`\nDeployment to ${config.ENV} environment completed successfully!`);
  } catch (error) {
    console.error(`Error deploying to ${config.ENV} environment:`);
    console.error(error.message);
    process.exit(1);
  }
}

/**
 * Main deployment function
 */
function main() {
  // Get the target environment from command line arguments
  const args = process.argv.slice(2);
  let environment = args[0] || DEFAULT_ENV;
  
  // Validate the environment
  if (!VALID_ENVIRONMENTS.includes(environment)) {
    console.error(`Invalid environment: ${environment}`);
    console.error(`Valid environments are: ${VALID_ENVIRONMENTS.join(', ')}`);
    process.exit(1);
  }
  
  // Parse additional flags
  const deployAll = args.includes('--all');
  
  console.log(`=== GEOS-Chem AWS Cloud Runner Deployment ===`);
  console.log(`Target Environment: ${environment.toUpperCase()}`);
  
  // Load environment configuration
  const config = loadEnvConfig(environment);
  
  // Update CDK tags
  updateCdkTags(config);
  
  // Run pre-deployment checks
  runPreDeploymentChecks(config);
  
  // Deploy the stacks
  deployStacks(config, deployAll);
}

// Execute main function
if (require.main === module) {
  main();
}

module.exports = {
  loadEnvConfig,
  updateCdkTags,
  runPreDeploymentChecks,
  deployStacks
};